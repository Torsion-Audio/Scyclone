name: Scyclone

on:
  workflow_dispatch: # lets you run a build from github.com
  push:
    branches: [ develop ]

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  PROJECT_NAME: Scyclone
  BUILD_TYPE: Debug
  CMAKE_BUILD_PARALLEL_LEVEL: 4 # Use up to 3 cpus to build juceaide, etc
  BUILD_DIR: build

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  cmake-build_and_ctest:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: macOS
            os: macos-latest
            ccache: ccache

    steps:

      - name: install macOS deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install osxutils
          
      # The uses keyword tells the job to retrieve the action named actions/checkout. This is an action that checks out your repository and downloads it to the runner, allowing you to run actions against your code (such as testing tools). You must use the checkout action any time your workflow will run against the repository's code or you are using an action defined in the repository.
      - uses: actions/checkout@v3
      # This will get the submodles on the runner
        with:
          submodules: true
      
      - name: printout
        run: |
          echo "os: ${{ matrix.os }}"
          echo "ccache: ${{ matrix.ccache }}"
          echo "BUILD_TYPE: ${{ env.BUILD_TYPE }}"
    
      - name: ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: v3-${{ matrix.os }}-${{ env.BUILD_TYPE }}
          variant: ${{ matrix.ccache }}
      
      - name: cmake configure
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: cmake build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}

      - name: ctest
        working-directory: ${{github.workspace}}/build
        run: ctest --verbose

      - name: Setup Environment Variables
        shell: bash
        run: |
          echo "ARTEFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
          echo "VST3_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3" >> $GITHUB_ENV
          echo "AU_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AU/${{ env.PROJECT_NAME }}.component" >> $GITHUB_ENV
          echo "STANDALONE_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/Standalone" >> $GITHUB_ENV
          echo "PRODUCT_NAME=${{ env.PROJECT_NAME }}-${{ matrix.name }}" >> $GITHUB_ENV
      
      - name: zip macOS
        if: ${{ matrix.name == 'macOS' }}
        working-directory: ${{ env.ARTEFACTS_PATH }}
        run: zip -vr Standalone.zip Standalone/ -x "*.DS_Store"
      
      - name: upload artifact (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}.zip
          path: ${{ env.ARTEFACTS_PATH }}/Standalone.zip